# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# TODO(brettw) Use "gcc_toolchain.gni" like the Linux toolchains. This requires
# some enhancements since the commands on Mac are slightly different than on
# Linux.

import("//build/config/ios/ios_sdk.gni")
import("//build/config/mac/mac_sdk.gni")
import("//build/config/tvos/tvos_sdk.gni")
import("../goma.gni")

assert(host_os == "mac")

import("//build/config/sysroot.gni")
import("//build/toolchain/clang.gni")
import("//build/toolchain/clang_static_analyzer.gni")
import("//build/toolchain/goma.gni")

assert(!enable_bitcode || !use_ios_simulator)
assert(!enable_bitcode || (use_xcode || bitcode_marker))

if (use_goma) {
  goma_prefix = "$goma_dir/gomacc "
} else {
  goma_prefix = ""
}

# This will copy the gyp-mac-tool to the build directory. We pass in the source
# file of the win tool.
gyp_mac_tool_source =
    rebase_path("//third_party/gyp/pylib/gyp/mac_tool.py", root_build_dir)
exec_script("setup_toolchain.py", [ gyp_mac_tool_source ])

tool_versions =
    exec_script("get_tool_mtime.py",
                rebase_path([ "//build/toolchain/mac/swiftc.py" ], root_build_dir),
                "trim scope")

# Shared toolchain definition. Invocations should set toolchain_os to set the
# build args in this definition.
template("mac_toolchain") {
  toolchain(target_name) {
    assert(defined(invoker.cc), "mac_toolchain() must specify a \"cc\" value")
    assert(defined(invoker.cxx), "mac_toolchain() must specify a \"cxx\" value")
    assert(defined(invoker.ld), "mac_toolchain() must specify a \"ld\" value")
    assert(defined(invoker.ar), "mac_toolchain() must specify a \"ar\" value")
    assert(defined(invoker.toolchain_cpu),
           "mac_toolchain() must specify a \"toolchain_cpu\"")
    assert(defined(invoker.toolchain_os),
           "mac_toolchain() must specify a \"toolchain_os\"")

    # We can't do string interpolation ($ in strings) on things with dots in
    # them. To allow us to use $cc below, for example, we create copies of
    # these values in our scope.
    cc = invoker.cc
    cxx = invoker.cxx
    ld = invoker.ld
    ar = invoker.ar

    if (use_clang_static_analyzer) {
      analyzer_wrapper =
          rebase_path("//build/toolchain/clang_static_analyzer_wrapper.py",
                      root_build_dir) + "  --mode=clang"
      cc = analyzer_wrapper + " ${cc}"
      cxx = analyzer_wrapper + " ${cxx}"
    }

    # Make these apply to all tools below.
    lib_switch = "-l"
    lib_dir_switch = "-L"

    sysroot_flags = ""

    if (defined(invoker.sysroot_flags)) {
      sysroot_flags = invoker.sysroot_flags
    }

    lto_flags = ""
    if (enable_lto) {
      lto_flags = "-flto=thin"
    }

    coverage_flags = ""
    if (enable_coverage) {
      coverage_flags = "-fprofile-instr-generate -fcoverage-mapping"
    }

    tool("cc") {
      depfile = "{{output}}.d"
      command = "$goma_prefix $cc -MD -MF $depfile {{defines}} {{include_dirs}} $sysroot_flags $lto_flags {{cflags}} {{cflags_c}} $coverage_flags -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC {{output}}"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      command = "$goma_prefix $cxx -MD -MF $depfile {{defines}} {{include_dirs}} $sysroot_flags $lto_flags {{cflags}} {{cflags_cc}} $coverage_flags -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CXX {{output}}"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
    }

    tool("asm") {
      # For GCC we can just use the C compiler to compile assembly.
      depfile = "{{output}}.d"
      command = "$goma_prefix $cc -MD -MF $depfile {{defines}} {{include_dirs}} {{asmflags}} $sysroot_flags $lto_flags {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "ASM {{output}}"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
    }

    tool("objc") {
      depfile = "{{output}}.d"
      command = "$goma_prefix $cxx -MD -MF $depfile {{defines}} {{include_dirs}} $sysroot_flags $lto_flags {{cflags}} {{cflags_c}} {{cflags_objc}} $coverage_flags -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "OBJC {{output}}"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
    }

    tool("objcxx") {
      depfile = "{{output}}.d"
      command = "$goma_prefix $cxx -MD -MF $depfile {{defines}} {{include_dirs}} $sysroot_flags $lto_flags {{cflags}} {{cflags_cc}} {{cflags_objcc}} $coverage_flags -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "OBJCXX {{output}}"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
    }

    tool("swift") {
      _tool = rebase_path("//build/toolchain/mac/swiftc.py", root_build_dir)

      depfile = "{{target_out_dir}}/{{module_name}}.d"
      depsformat = "gcc"

      outputs = [
        # The module needs to be the first output listed. The blank line after
        # the module is required to prevent `gn format` from changing the file
        # order.
        "{{target_gen_dir}}/{{module_name}}.swiftmodule",

        "{{target_gen_dir}}/{{target_output_name}}.h",
        "{{target_gen_dir}}/{{module_name}}.swiftdoc",
        "{{target_gen_dir}}/{{module_name}}.swiftsourceinfo",
      ]

      # Additional flags passed to the wrapper script but that are only
      # set conditionally.
      _extra_flags = ""
      _objects_dir = "{{target_out_dir}}/{{label_name}}"
      partial_outputs = [ "$_objects_dir/{{source_name_part}}.o" ]

      _env_vars = "TOOL_VERSION=${tool_versions.swiftc}"

       # Starting with version 5.6, the Swift compiler will always
      # generates precompiled headers. In anterior version, it was
      # used when bridging headers and whole module optimisation
      # where enabled, and it could be disabled with the parameter
      # `-disable-bridging-pch`.
      #
      # The precompiled headers are binary files (i.e. they are not
      # regular Objective-C header files and cannot be loaded as such).
      #
      # There is an hidden requirements that the compiler needs to
      # be told where to save those .pch files (via the parameter
      # `-pch-output-dir $dir`). If this parameter is not passed, the
      # compiler will silently write them at an incorrect location,
      # leading later pass to try to load those .pch files as either
      # regular header files (.h) or object files (.o) and causing
      # to compilation failures.
      #
      # List the directory where the precompiled header is generated
      # as an output, but do not list the .pch file itself. This is
      # because the names includes two hashes (one corresponding to
      # the compiler revision, and the other probably derived from
      # the module itself) that are difficult to generate.
      #
      # Still we want to avoid creating a directory that has the same
      # name as a file generated by another rule, so explicitly list
      # the directory in `outputs` so that gn can warn it is conflicts
      # with another output file.

      _pch_output_dir = "{{target_out_dir}}/{{module_name}}:pch/"
      outputs += [ _pch_output_dir ]

      # Include the version of the compiler on the command-line. This causes
      # `ninja` to consider all the compilation output to be dirty when the
      # version changes.
      if (defined(swiftc_version)) {
        _extra_flags += " -swiftc-version $swiftc_version"
      }

      # Include the version of Xcode on the command-line (if specified via
      # toolchain_args). This causes `ninja` to consider all the compilation
      # outputs to be dirty when the version change.
      #
      # This is required because sometimes module dependency changes between
      # different version of Xcode (e.g. when moving from Xcode 14 beta 6 to
      # Xcode 14 RC). If the swiftmodule are not rebuilt when the version
      # changes, they may encode dependency on now non-existing frameworks
      # causing linker failures ultimately.
      #if (defined(toolchain_args.xcode_build)) {
      #  _extra_flags += " -xcode-version ${toolchain_args.xcode_build}"
      #}

      # The Swift compiler assumes that the generated header will be used by
      # Objective-C code compiled with module support enabled (-fmodules).
      #
      # The import looks like this in the generated header:
      #
      #     #if __has_feature(modules)
      #     @import UIKit;
      #     #endif
      #
      # As Chromium code is compiled without support for modules (i.e. the
      # code is compiled without `-fmodules`), the dependent modules are not
      # imported from the generated header, which causes compilation failure
      # if the client code does not first import the required modules (see
      # https://crbug.com/1316061 for details).
      #
      # Secondly, clang ToT always returns `1` when `__has_features(modules)`
      # is evaluated, even if building with `-fno-modules` when building with
      # `-std=c++20` (see https://crbug.com/1284275 for details). This causes
      # the `@import` lines to be reached and the build to fail (since the
      # support for modules is not enabled).
      #
      # Instruct swiftc.py to rewrite the generated header to use the old
      # import pre-processor instructions (#import <UIKit/UIKit.h>) to work
      # around those two issues.
      _extra_flags += " -fix-module-imports"

      command =
          "$_env_vars $python_path $_tool -module-name {{module_name}} " +
          "-root-dir " + rebase_path("//", root_build_dir) + " " +
          "-object-dir $_objects_dir -pch-output-dir $_pch_output_dir " +
          "-module-path {{target_gen_dir}}/{{module_name}}.swiftmodule " +
          "-header-path {{target_gen_dir}}/{{target_output_name}}.h " +
          "-depfile {{target_out_dir}}/{{module_name}}.d " +
          "-depfile-filter {{target_gen_dir}}/{{module_name}}.swiftmodule " +
          "-bridge-header {{bridge_header}} $_extra_flags " +
          "{{swiftflags}} {{include_dirs}} {{module_dirs}} {{inputs}}"
    }

    tool("alink") {
      command = "rm -f {{output}} && $ar rcs {{output}} {{inputs}}"
      description = "CREATE ARCHIVE {{output}}"
      outputs =
          [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]
      default_output_extension = ".a"
      output_prefix = "lib"
    }

    tool("solink") {
      dylib = "{{output_dir}}/{{target_output_name}}{{output_extension}}"  # eg
                                                                             # "./libfoo.dylib"
      rspfile = dylib + ".rsp"

      # These variables are not build into GN but are helpers that implement
      # (1) linking to produce a .so, (2) extracting the symbols from that file
      # to a temporary file, (3) if the temporary file has differences from the
      # existing .TOC file, overwrite it, oterwise, don't change it.
      #
      # As a special case, if the library reexports symbols from other dynamic
      # libraries, we always update the .TOC and skip the temporary file and
      # diffing steps, since that library always needs to be re-linked.
      tocname = dylib + ".TOC"
      temporary_tocname = dylib + ".tmp"

      lto_object_file = "{{output_dir}}/lto_{{target_output_name}}.o"

      map_switch = ""
      if (enable_linker_map) {
        map_file = "{{target_output_name}}{{output_extension}}.map"
        map_switch = "-Wl,-map,$map_file"
      }

      does_reexport_command = "[ ! -e $dylib -o ! -e $tocname ] || otool -l $dylib | grep -q LC_REEXPORT_DYLIB"
      link_command = "$ld -shared $sysroot_flags $lto_flags $coverage_flags -Wl,-object_path_lto,$lto_object_file {{ldflags}} -o $dylib $map_switch -Wl,-filelist,$rspfile {{solibs}} {{libs}} {{frameworks}}"
      replace_command = "if ! cmp -s $temporary_tocname $tocname; then mv $temporary_tocname $tocname"
      extract_toc_command = "{ otool -l $dylib | grep LC_ID_DYLIB -A 5; nm -gP $dylib | cut -f1-2 -d' ' | grep -v U\$\$; true; }"

      command = "if $does_reexport_command ; then $link_command && $extract_toc_command > $tocname; else $link_command && $extract_toc_command > $temporary_tocname && $replace_command ; fi; fi"

      rspfile_content = "{{inputs_newline}}"

      description = "SOLINK {{output}}"

      default_output_dir = "{{root_out_dir}}"

      # Use this for {{output_extension}} expansions unless a target manually
      # overrides it (in which case {{output_extension}} will be what the target
      # specifies).
      default_output_extension = ".dylib"

      output_prefix = "lib"

      # Since the above commands only updates the .TOC file when it changes, ask
      # Ninja to check if the timestamp actually changed to know if downstream
      # dependencies should be recompiled.
      restat = true

      # Tell GN about the output files. It will link to the dylib but use the
      # tocname for dependency management.
      outputs = [
        dylib,
        tocname,
      ]
      link_output = dylib
      depend_output = tocname
    }

    tool("link") {
      outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      rspfile = "$outfile.rsp"

      command = "$ld $sysroot_flags $lto_flags {{ldflags}} $coverage_flags -Xlinker -rpath -Xlinker @executable_path/Frameworks -o $outfile -Wl,-filelist,$rspfile {{solibs}} {{libs}} {{frameworks}}"
      description = "LINK $outfile"

      default_output_dir = "{{root_out_dir}}"

      rspfile_content = "{{inputs_newline}}"
      outputs = [ outfile ]
    }

    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }

    tool("copy") {
      command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
      description = "COPY {{source}} {{output}}"
    }

    tool("copy_bundle_data") {
      command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
      description = "COPY BUNDLE DATA {{source}} {{output}}"
    }

    tool("compile_xcassets") {
      _tool = rebase_path("//build/toolchain/mac/compile_xcassets.py",
                            root_build_dir)
      command =
            "$python_path $_tool " +
            "-p '${target_os}' " +
            "-e '${invoker.target_environment}' " +
            "-t '${invoker.deployment_target}' " +
            "-T '{{bundle_product_type}}' " +
            "-P '{{bundle_partial_info_plist}}' " + "-o {{output}} {{inputs}}"

      description = "COMPILE_XCASSETS {{output}}"
    }

    toolchain_args = {
      current_cpu = invoker.toolchain_cpu
      current_os = invoker.toolchain_os

      # These values need to be passed through unchanged.
      target_os = target_os
      target_cpu = target_cpu

      if (defined(invoker.is_clang)) {
        is_clang = invoker.is_clang
      }
    }
  }
}

if (!use_xcode) {
  prefix = rebase_path("//buildtools/llvm/bin", root_build_dir)
  ar_exec = "$prefix/llvm-ar"
  cc_exec = "$prefix/clang"
  cxx_exec = "$prefix/clang++"
} else {
  find_xcode_executable = "//build/mac/find_xcode_executable.py"
  ar_exec = exec_script(find_xcode_executable, ["ar"], "trim string")
  cc_exec = exec_script(find_xcode_executable, ["clang"], "trim string")
  cxx_exec = exec_script(find_xcode_executable, ["clang++"], "trim string")
}

# Toolchain used for iOS device targets.
mac_toolchain("ios_clang_arm") {
  toolchain_cpu = "arm"
  toolchain_os = "mac"

  ar = ar_exec
  cc = cc_exec
  cxx = cxx_exec

  ld = cxx
  is_clang = true
  sysroot_flags = "-isysroot $ios_device_sdk_path -miphoneos-version-min=$ios_deployment_target"

  target_environment = "device"
  deployment_target = ios_deployment_target
}

# Toolchain used for iOS simulator targets.
mac_toolchain("ios_clang_x64") {
  toolchain_cpu = "x64"
  toolchain_os = "mac"

  ar = ar_exec
  cc = cc_exec
  cxx = cxx_exec

  ld = cxx
  is_clang = true
  sysroot_flags = "-isysroot $ios_simulator_sdk_path -mios-simulator-version-min=$ios_deployment_target"

  target_environment = "simulator"
  deployment_target = ios_deployment_target
}

# Toolchain used for tvOS device targets.
mac_toolchain("tvos_clang_arm") {
  toolchain_cpu = "arm"
  toolchain_os = "mac"

  ar = ar_exec
  cc = cc_exec
  cxx = cxx_exec

  ld = cxx
  is_clang = true
  sysroot_flags = "-isysroot $tvos_device_sdk_path -mtvos-version-min=$tvos_deployment_target"

  target_environment = "device"
  deployment_target = tvos_deployment_target
}

# Toolchain used for tvOS simulator targets.
mac_toolchain("tvos_clang_x64") {
  toolchain_cpu = "x64"
  toolchain_os = "mac"

  ar = ar_exec
  cc = cc_exec
  cxx = cxx_exec

  ld = cxx
  is_clang = true
  sysroot_flags = "-isysroot $tvos_simulator_sdk_path -mtvos-simulator-version-min=$tvos_deployment_target"

  target_environment = "simulator"
  deployment_target = tvos_deployment_target
}

# Toolchain used for Mac X64 host targets.
mac_toolchain("clang_x64") {
  toolchain_cpu = "x64"
  toolchain_os = "mac"

  ar = ar_exec
  cc = cc_exec
  cxx = cxx_exec

  ld = cxx
  is_clang = true
  sysroot_flags =
      "-isysroot $mac_sdk_path -mmacosx-version-min=$mac_deployment_target"

  target_environment = "device"
  deployment_target = mac_deployment_target
}

# Toolchain used for Mac ARM64 host targets.
mac_toolchain("clang_arm64") {
  toolchain_cpu = "arm64"
  toolchain_os = "mac"

  ar = ar_exec
  cc = cc_exec
  cxx = cxx_exec

  ld = cxx
  is_clang = true
  sysroot_flags =
      "-isysroot $mac_sdk_path -mmacosx-version-min=$mac_deployment_target"

  target_environment = "device"
  deployment_target = mac_deployment_target
}
